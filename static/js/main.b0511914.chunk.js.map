{"version":3,"sources":["context/TaskListContext.jsx","components/Task.jsx","components/TaskList.jsx","components/TaskForm.jsx","App.js","serviceWorker.js","index.js"],"names":["TaskListContext","createContext","TaskListContextProvider","props","initialState","JSON","parse","localStorage","getItem","useState","tasks","setTasks","useEffect","setItem","stringify","editItem","setEditItem","Provider","value","addTask","title","length","id","removeTask","filter","task","clearList","findItem","item","find","editTask","newTasks","map","children","Task","styleForButton","display","marginTop","useContext","style","justifyContent","alignItems","position","padding","height","fontSize","width","textAlign","Button","onClick","TaskList","backgroundColor","margin","overflowY","key","paddingTop","color","TaskForm","setTitle","onSubmit","e","preventDefault","onChange","target","noValidate","autoComplete","marginBottom","TextField","fullWidth","required","label","variant","type","App","Container","maxWidth","flexDirection","wdith","borderRadius","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b0511914.chunk.js","sourcesContent":["import React, { createContext, useState, useEffect } from \"react\";\r\n\r\nexport const TaskListContext = createContext();\r\n\r\nconst TaskListContextProvider = (props) => {\r\n  const initialState = JSON.parse(localStorage.getItem(\"tasks\")) || [];\r\n\r\n  const [tasks, setTasks] = useState(initialState);\r\n\r\n  // Check local storage\r\n  useEffect(() => {\r\n    localStorage.setItem(\"tasks\", JSON.stringify(tasks));\r\n  }, [tasks]);\r\n\r\n  const [editItem, setEditItem] = useState(null);\r\n\r\n  const editTask = (title, id) => {\r\n    const newTasks = tasks.map((task) =>\r\n      task.id === id ? { title, id } : task\r\n    );\r\n\r\n    setTasks(newTasks);\r\n    setEditItem(null);\r\n  };\r\n\r\n  const addTask = (title) => {\r\n    if (title.length <= 0) return;\r\n\r\n    setTasks([\r\n      ...tasks,\r\n      {\r\n        title,\r\n        id: tasks.length + 1,\r\n      },\r\n    ]);\r\n  };\r\n\r\n  const removeTask = (id) => {\r\n    setTasks(tasks.filter((task) => task.id !== id));\r\n  };\r\n\r\n  const clearList = () => {\r\n    setTasks([]);\r\n  };\r\n\r\n  const findItem = (id) => {\r\n    const item = tasks.find((task) => task.id === id);\r\n\r\n    setEditItem(item);\r\n  };\r\n\r\n  return (\r\n    <TaskListContext.Provider\r\n      value={{\r\n        tasks,\r\n        addTask,\r\n        removeTask,\r\n        clearList,\r\n        findItem,\r\n        editTask,\r\n        editItem,\r\n      }}\r\n    >\r\n      {props.children}\r\n    </TaskListContext.Provider>\r\n  );\r\n};\r\n\r\nexport default TaskListContextProvider;\r\n","import React, { useContext } from \"react\";\r\nimport { TaskListContext } from \"../context/TaskListContext\";\r\n\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\n\r\nconst Task = ({ task }) => {\r\n  const styleForListItem = {\r\n    display: \"flex\",\r\n    justifyContent: \"space-between\",\r\n    alignItems: \"center\",\r\n    position: \"relative\",\r\n    padding: \"0.4rem\",\r\n    height: \"2rem\",\r\n    fontSize: \"1.5rem\",\r\n  };\r\n\r\n  const styleForButton = {\r\n    display: \"inline-block\",\r\n    marginTop: \"4px\",\r\n  };\r\n\r\n  const styleForSpan = {\r\n    width: \"300px\",\r\n    textAlign: \"left\",\r\n  };\r\n\r\n  const { removeTask, findItem } = useContext(TaskListContext);\r\n\r\n  return (\r\n    <li style={styleForListItem}>\r\n      <span style={styleForSpan}> {task.title}</span>\r\n      <Button style={styleForButton} onClick={() => removeTask(task.id)}>\r\n        <DeleteIcon />\r\n      </Button>\r\n      <Button style={styleForButton} onClick={() => findItem(task.id)}>\r\n        <EditIcon />\r\n      </Button>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default Task;\r\n","import React, { useContext } from \"react\";\r\nimport { TaskListContext } from \"../context/TaskListContext\";\r\nimport Task from \"./Task\";\r\n\r\nconst TaskList = () => {\r\n  const { tasks } = useContext(TaskListContext);\r\n\r\n  const styleForList = {\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n    backgroundColor: \"#E6D4CF\",\r\n    margin: \"auto\",\r\n    overflowY: \"auto\",\r\n    textAlign: \"center\",\r\n  };\r\n\r\n  const styleForNoTasksText = {\r\n    fontSize: \"2rem\",\r\n    paddingTop: \"2rem\",\r\n    color: \"#989DB3\",\r\n  };\r\n\r\n  return (\r\n    <div style={styleForList}>\r\n      {tasks.length ? (\r\n        <ul>\r\n          {tasks.map((task) => {\r\n            return <Task task={task} key={task.id} />;\r\n          })}\r\n        </ul>\r\n      ) : (\r\n        <div style={styleForNoTasksText}>No Tasks</div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TaskList;\r\n","import React, { useContext, useState, useEffect } from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport { TaskListContext } from \"../context/TaskListContext\";\r\n\r\nconst TaskForm = () => {\r\n  const { addTask, editTask, editItem, clearList } = useContext(\r\n    TaskListContext\r\n  );\r\n\r\n  const [title, setTitle] = useState(\"\");\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (!editItem) {\r\n      addTask(title);\r\n      setTitle(\"\");\r\n    } else {\r\n      editTask(title, editItem.id);\r\n    }\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    setTitle(e.target.value);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (editItem !== null) {\r\n      setTitle(editItem.title);\r\n    } else {\r\n      setTitle(\"\");\r\n    }\r\n  }, [editItem]);\r\n\r\n  return (\r\n    <form\r\n      onSubmit={handleSubmit}\r\n      onChange={handleChange}\r\n      noValidate\r\n      autoComplete=\"off\"\r\n      style={{ marginBottom: \"2rem\" }}\r\n    >\r\n      <TextField\r\n        fullWidth\r\n        required\r\n        label={editItem ? \"Edit Task\" : \"Add Task\"}\r\n        value={title}\r\n      />\r\n\r\n      <div style={{ display: \"inline-block\" }}>\r\n        <Button variant=\"contained\" color=\"primary\" type=\"submit\">\r\n          {editItem ? \"Edit Task\" : \"Add Task\"}\r\n        </Button>\r\n        <Button variant=\"contained\" color=\"secondary\" onClick={clearList}>\r\n          Clear All\r\n        </Button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default TaskForm;\r\n","import React from \"react\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Container from \"@material-ui/core/Container\";\nimport \"./App.css\";\nimport TaskList from \"./components/TaskList\";\nimport TaskListContextProvider from \"./context/TaskListContext\";\nimport TaskForm from \"./components/TaskForm\";\nimport { red } from \"@material-ui/core/colors\";\n\nfunction App() {\n  const styleForDiv = {\n    display: \"flex\",\n    flexDirection: \"column\",\n    backgroundColor: \"#FFECE6\",\n    wdith: \"400px\",\n    height: \"600px\",\n    padding: \"2rem\",\n    marginTop: \"1rem\",\n    borderRadius: \"10px\",\n    overflowY: \"auto\",\n  };\n\n  const styleForForm = {\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    marginBottom: \"2rem\",\n  };\n\n  return (\n    <TaskListContextProvider>\n      <Container maxWidth=\"sm\">\n        <div style={styleForDiv}>\n          <h1 style={{ marginBottom: \"2rem\" }}>Task Manager</h1>\n          <TaskForm style={styleForForm} />\n          <TaskList />\n        </div>\n      </Container>\n    </TaskListContextProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}